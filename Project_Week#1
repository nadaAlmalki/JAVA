import java.util.Random;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        char[][] matrix = {{' ', ' ',' '},
                {' ', ' ',' '},
                {' ', ' ',' '}};
        displaymtatrix(matrix);

        while (true) {
            playermethod(matrix, scanner);
            if (game_over(matrix)){
                break;
            }
            displaymtatrix(matrix);

            computermethod(matrix);
            if (game_over(matrix)){
                break;
            }
            displaymtatrix(matrix);
        }
        scanner.close();
    }
    public static void displaymtatrix(char[][] x_omatrix) {

        System.out.println(x_omatrix[0][0]+ "|" + x_omatrix[0][1]+ "|" +x_omatrix[0][2]);
        System.out.println("--+--");
        System.out.println(x_omatrix[1][0]+ "|" + x_omatrix[1][1]+ "|" +x_omatrix[1][2]);
        System.out.println("--+--");
        System.out.println(x_omatrix[2][0]+ "|" + x_omatrix[2][1]+ "|" +x_omatrix[2][2]);
    }

    public static void computermethod(char[][] matrx) {
        Random rand = new Random();
        int num2;
        int min = 1;
        int max = 9;
        while (true) {
            num2 = (int) (Math.random() * (max - min + 1) + min);;
            if (isValid(matrx, Integer.toString(num2))) {
                break;
            }
        }
        System.out.println("Computer chose " + num2);
        position(matrx, Integer.toString(num2), "computer");
    }
    public static void playermethod(char[][] board, Scanner input) {
       // Scanner input = new Scanner(System.in);
        String input_num;
        while (true) {
            System.out.println("Where would you like to play? (1-9)");
            input_num = input.nextLine();
            if (isValid(board, input_num)){
                break;
            } else {
                System.out.println(input_num + " is not a valid.");
            }
        }
        position(board, input_num, "user");
    }

    public static boolean game_over(char[][] matrixx) {

        if (chech_winner(matrixx, 'X')) {
            displaymtatrix(matrixx);
            System.out.println("Congratulation you won!");
            return true;
        }

        if (chech_winner(matrixx, 'O')) {
            displaymtatrix(matrixx);
            System.out.println("Computer wins!");
            return true;
        }

        //row
        for (int i = 0; i < matrixx.length; i++) {
            //columns
            for (int j = 0; j < matrixx[i].length; j++) {
                if (matrixx[i][j] == ' ') {
                    return false;
                }
            }
        }
        displaymtatrix(matrixx);
        System.out.println("The game is end");
        return true;
    }


    public static boolean chech_winner(char[][] board, char symbol) {
        if ((board[0][0] == symbol && board [0][1] == symbol && board [0][2] == symbol) ||
                (board[1][0] == symbol && board [1][1] == symbol && board [1][2] == symbol) ||
                (board[2][0] == symbol && board [2][1] == symbol && board [2][2] == symbol) ||
                (board[0][0] == symbol && board [1][0] == symbol && board [2][0] == symbol) ||
                (board[0][1] == symbol && board [1][1] == symbol && board [2][1] == symbol) ||
                (board[0][2] == symbol && board [1][2] == symbol && board [2][2] == symbol) ||
                (board[0][0] == symbol && board [1][1] == symbol && board [2][2] == symbol) ||
                (board[0][2] == symbol && board [1][1] == symbol && board [2][0] == symbol) ) {
            return true;
        }
        return false;
    }





    public static boolean isValid (char[][] board, String position) {
        switch(position) {
            case "1":
                return (board[0][0] == ' ');
            case "2":
                return (board[0][1] == ' ');
            case "3":
                return (board[0][2] == ' ');
            case "4":
                return (board[1][0] == ' ');
            case "5":
                return (board[1][1] == ' ');
            case "6":
                return (board[1][2] == ' ');
            case "7":
                return (board[2][0] == ' ');
            case "8":
                return (board[2][1] == ' ');
            case "9":
                return (board[2][2] == ' ');
            default:
                return false;
        }
    }



    public static void position(char[][] board, String position, String player) {
        char symbol = ' ';
        if (player.equals("user")) {
            symbol = 'X';
        } else if (player.equals("computer")) {
            symbol = 'O';
        }
        switch(position) {
            case "1":
                board[0][0] = symbol;
                break;
            case "2":
                board[0][1] = symbol;
                break;
            case "3":
                board[0][2] = symbol;
                break;
            case "4":
                board[1][0] = symbol;
                break;
            case "5":
                board[1][1] = symbol;
                break;
            case "6":
                board[1][2] = symbol;
                break;
            case "7":
                board[2][0] = symbol;
                break;
            case "8":
                board[2][1] = symbol;
                break;
            case "9":
                board[2][2] = symbol;
                break;
            default:
                System.out.println(":(");
        }
    }

}
