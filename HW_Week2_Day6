import java.lang.reflect.Array;
import java.util.Scanner;
import java.util.InputMismatchException;
public class Main {
    public static void main(String[] args) {
        try {
            System.out.println("Hello world!");
            Scanner input = new Scanner(System.in);
            Scanner scan = new Scanner(System.in);
            //Q7:
            System.out.println("The Question#7 ");
            int size = 4;
            int[] list = new int[4];
            //Scanner input = new Scanner(System.in);
            //Scanner scan = new Scanner(System.in);
            // try {
            System.out.print("Enter Array size: ");
           // size = input.nextInt();
            list = new int[size];
            // }

            char option;

            do {
                System.out.println("Menu ");
                System.out.println("A. Enter array elements");
                System.out.println("B.  Display elements of an array ");
                System.out.println("C. Search the element within array");
                System.out.println("D. Sort the array");
                System.out.print("Select an Option : ");
                String str = scan.nextLine();
                option = str.charAt(0);

                switch (option) {
                    case 'A':
                        readArray(list);
                        break;
                    case 'B':
                        displayArray(list);
                        break;
                    case 'C':
                        System.out.print("Enter the number you want to search: ");
                        int index = input.nextInt();
                        int item = searchArray(list);
                        if (index ==0 && index > 4) {
                            System.out.println("Number is NOT Exist");
                        } else {
                           // index(list.length-1);
                            System.out.println("Number is " + list[index]);
                        }
                        break;
                    case 'D':
                        System.out.println("Sorted Array :");
                        sortArray(list);
                        displayArray(list);
                    default:
                        System.out.println(" ");
                }
            } while (option != 'A' || option != 'C' || option != 'D');

        }

        catch (InputMismatchException e){
            System.out.print(" ");
            //   System.exit(0);
        }
        catch (ArrayIndexOutOfBoundsException e){
            System.out.print(" ");
        }
    }

    static void readArray(int[] array)
    {Scanner input = new Scanner(System.in);
        for (int i = 0; i < array.length; i++)
        {
            array[i] = input.nextInt();
        }
    }

    static void displayArray(int[] array)
    {
        for (int i = 0; i < array.length; i++)
        {
            System.out.print(array[i] + " ");
        }
        System.out.println();
    }

    static int searchArray(int[] array) throws InputMismatchException
    { //int index =0;
        int i ;
        for (i = 0; i < 4; i++)
        { if(i == 0 && i < 4){
            int index = (int) Array.get(array, i);
           // i  = array[i]   ;
                return index ;
            }


    }return 0;
    }

    static void sortArray(int[] array)
    {
        for (int i = 0; i < array.length - 1; i++)
        {
            for(int j = 0; j < array.length -i-1; j++)
            {
                if(array[j] > array[j+1])
                {
                    int temp = array[j];
                    array[j] = array[j+1];
                    array[j+1] = temp;
                }
            }
        }
    }
}





###################################3
Project X_ O Game


import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;

public class Main {
    static Scanner input = new Scanner(System.in);
    public static void main(String[] args) {

try{
        char[][] matrix = {{' ', ' ',' '},
                {' ', ' ',' '},
                {' ', ' ',' '}};
        displaymtatrix(matrix);
        int input_num = 0;
        while (true) {
            playermethod(matrix, input_num);
            if (game_over(matrix)){
                break;
            }
            displaymtatrix(matrix);

            computermethod(matrix);
            if (game_over(matrix)){
                break;
            }
            displaymtatrix(matrix);
        }
        input.close();
    }
        catch(InputMismatchException e){
            System.out.print(" ");

}   catch(ArrayIndexOutOfBoundsException e){
    System.out.print(" ");

}
    }

    public static void displaymtatrix(char[][] x_omatrix) {

        System.out.println(x_omatrix[0][0]+ "|" + x_omatrix[0][1]+ "|" +x_omatrix[0][2]);
        System.out.println("--+--");
        System.out.println(x_omatrix[1][0]+ "|" + x_omatrix[1][1]+ "|" +x_omatrix[1][2]);
        System.out.println("--+--");
        System.out.println(x_omatrix[2][0]+ "|" + x_omatrix[2][1]+ "|" +x_omatrix[2][2]);
    }

    public static void computermethod(char[][] matrx) {
        Random rand = new Random();
        int num2;
        int min = 1;
        int max = 9;
        while (true) {
            num2 = (int) (Math.random() * (max - min + 1) + min);;
            if (isValid(matrx, num2)) {
                break;
            }
        }
        System.out.println("Computer chose " + num2);
        position(matrx, num2, "computer");
    }
    public static void playermethod(char[][] board, int inputt) {
        Scanner input = new Scanner(System.in);
        int input_num;

        while (true ) {
            System.out.println("Where would you like to play? (1-9)");
           input_num = input.nextInt();
            if (isValid(board, input_num)){
               break;
            } else {
                // System.out.println(input_num + " is not a valid.");
                System.exit(0);
            }

        }

        position(board, input_num, "user");
    }

    public static boolean game_over(char[][] matrixx) {

        if (chech_winner(matrixx, 'X')) {
            displaymtatrix(matrixx);
            System.out.println("Congratulation you won!");
            return true;
        }

        if (chech_winner(matrixx, 'O')) {
            displaymtatrix(matrixx);
            System.out.println("Computer wins!");
            return true;
        }

        //row
        for (int i = 0; i < matrixx.length; i++) {
            //columns
            for (int j = 0; j < matrixx[i].length; j++) {
                if (matrixx[i][j] == ' ') {
                    return false;
                }
            }
        }
        displaymtatrix(matrixx);
        System.out.println("The game is end");
        return true;
    }


    public static boolean chech_winner(char[][] board, char symbol) {
        if ((board[0][0] == symbol && board [0][1] == symbol && board [0][2] == symbol) ||
                (board[1][0] == symbol && board [1][1] == symbol && board [1][2] == symbol) ||
                (board[2][0] == symbol && board [2][1] == symbol && board [2][2] == symbol) ||
                (board[0][0] == symbol && board [1][0] == symbol && board [2][0] == symbol) ||
                (board[0][1] == symbol && board [1][1] == symbol && board [2][1] == symbol) ||
                (board[0][2] == symbol && board [1][2] == symbol && board [2][2] == symbol) ||
                (board[0][0] == symbol && board [1][1] == symbol && board [2][2] == symbol) ||
                (board[0][2] == symbol && board [1][1] == symbol && board [2][0] == symbol) ) {
            return true;
        }
        return false;
    }





    public static boolean isValid (char[][] board, int position) {
        for (int i = 0; i < board.length; i++) {
            //columns
            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j] !=0 && board[i][j] <=10 ) {
                    return false;
                }
            }
        }
        switch(position) {
            case 1:
                return (board[0][0] == ' ');
            case 2:
                return (board[0][1] == ' ');
            case 3:
                return (board[0][2] == ' ');
            case 4:
                return (board[1][0] == ' ');
            case 5:
                return (board[1][1] == ' ');
            case 6:
                return (board[1][2] == ' ');
            case 7:
                return (board[2][0] == ' ');
            case 8:
                return (board[2][1] == ' ');
            case 9:
                return (board[2][2] == ' ');
            default:
                return false;
        }

    }



    public static void position(char[][] board, int position, String player) {
        char symbol = ' ';
        if (player.equals("user")) {
            symbol = 'X';
        } else if (player.equals("computer")) {
            symbol = 'O';
        }
        switch(position) {
            case 1:
                board[0][0] = symbol;
                break;
            case 2:
                board[0][1] = symbol;
                break;
            case 3:
                board[0][2] = symbol;
                break;
            case 4:
                board[1][0] = symbol;
                break;
            case 5:
                board[1][1] = symbol;
                break;
            case 6:
                board[1][2] = symbol;
                break;
            case 7:
                board[2][0] = symbol;
                break;
            case 8:
                board[2][1] = symbol;
                break;
            case 9:
                board[2][2] = symbol;
                break;
            default:
                System.out.println(":(");
        }
    }

}
